
// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Agent.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Framework.Protobuf.Message {

  /// <summary>Holder for reflection information generated from Agent.proto</summary>
  public static partial class AgentReflection {

    #region Descriptor
    /// <summary>File descriptor for Agent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AgentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtBZ2VudC5wcm90bxIXRW5naW5lLlByb3RvYnVmLk1lc3NhZ2UiIgoHRW5j",
            "cmlwdBILCgNLZXkYASABKAkSCgoCSVYYAiABKAkiFgoEU2VlZBIOCgZPZmZz",
            "ZXQYASABKAUikwEKB0Nvbm5lY3QSEgoKU2VydmVyVHlwZRgBIAEoCRILCgNV",
            "SUQYAiABKAMSEAoIUHJvdmlkZXIYAyABKAkSDwoHUHVibGlzaBgEIAEoCRIO",
            "CgZSZWdpb24YBSABKAkSDwoHQWRkcmVzcxgGIAEoAxIQCghQdWJsaWNJcBgH",
            "IAEoCRIRCglQcml2YXRlSXAYCCABKAkiygEKC1Byb2Nlc3NJbmZvEhIKClNl",
            "cnZlclR5cGUYASABKAkSCwoDVUlEGAIgASgDEhAKCFByb3ZpZGVyGAMgASgJ",
            "Eg8KB1B1Ymxpc2gYBCABKAkSDgoGUmVnaW9uGAUgASgJEg8KB1ZlcnNpb24Y",
            "BiABKAkSDQoFU3RhdGUYByABKAkSEQoJTGFzdEVycm9yGAggASgJEhAKCFB1",
            "YmxpY0lwGAkgASgJEhEKCVByaXZhdGVJcBgKIAEoCRIPCgdBZGRyZXNzGAsg",
            "ASgDIqgBCgVQYXRjaBIQCghQcm92aWRlchgBIAEoCRIPCgdQdWJsaXNoGAIg",
            "ASgJEg4KBlJlZ2lvbhgDIAEoCRISCgpTZXJ2ZXJUeXBlGAQgASgJEg8KB0Fk",
            "ZHJlc3MYBSABKAMSEAoIUHVibGljSXAYBiABKAkSEQoJUHJpdmF0ZUlwGAcg",
            "ASgJEg8KB1ZlcnNpb24YCCABKAkSEQoJRXJyb3JDb2RlGAkgASgJInUKB1Jl",
            "c3RhcnQSEAoIUHJvdmlkZXIYASABKAkSDwoHUHVibGlzaBgCIAEoCRIOCgZS",
            "ZWdpb24YAyABKAkSEwoLU2VydmVyVHlwZXMYBCADKAkSDwoHQWRkcmVzcxgF",
            "IAEoAxIRCglFcnJvckNvZGUYBiABKAkidwoJVGVybWluYXRlEhAKCFByb3Zp",
            "ZGVyGAEgASgJEg8KB1B1Ymxpc2gYAiABKAkSDgoGUmVnaW9uGAMgASgJEhMK",
            "C1NlcnZlclR5cGVzGAQgAygJEg8KB0FkZHJlc3MYBSABKAMSEQoJRXJyb3JD",
            "b2RlGAYgASgJIoYBCgZDb25maWcSEAoIUHJvdmlkZXIYASABKAkSDwoHUHVi",
            "bGlzaBgCIAEoCRIOCgZSZWdpb24YAyABKAkSEwoLU2VydmVyVHlwZXMYBCAD",
            "KAkSDwoHQWRkcmVzcxgFIAEoAxIRCglFcnJvckNvZGUYBiABKAkSEAoIT3Zl",
            "cnJpZGUYByABKAkijQEKBk5vdGlmeRIQCghQcm92aWRlchgBIAEoCRIPCgdQ",
            "dWJsaXNoGAIgASgJEg4KBlJlZ2lvbhgDIAEoCRIPCgdBZGRyZXNzGAQgASgD",
            "EhIKClNlcnZlclR5cGUYBSABKAkSEQoJRXJyb3JDb2RlGAYgASgJEgoKAklk",
            "GAcgASgFEgwKBERhdGEYCCABKAkingEKB0Nhc3BhcnMSEAoIUHJvdmlkZXIY",
            "ASABKAkSDwoHUHVibGlzaBgCIAEoCRIOCgZSZWdpb24YAyABKAkSEwoLU2Vy",
            "dmVyVHlwZXMYBCADKAkSDwoHQWRkcmVzcxgFIAEoAxI6CgxQcm9jZXNzSW5m",
            "b3MYBiADKAsyJC5FbmdpbmUuUHJvdG9idWYuTWVzc2FnZS5Qcm9jZXNzSW5m",
            "b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.Encript), global::Framework.Protobuf.Message.Encript.Parser, new[]{ "Key", "IV" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.Seed), global::Framework.Protobuf.Message.Seed.Parser, new[]{ "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.Connect), global::Framework.Protobuf.Message.Connect.Parser, new[]{ "ServerType", "UID", "Provider", "Publish", "Region", "Address", "PublicIp", "PrivateIp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.ProcessInfo), global::Framework.Protobuf.Message.ProcessInfo.Parser, new[]{ "ServerType", "UID", "Provider", "Publish", "Region", "Version", "State", "LastError", "PublicIp", "PrivateIp", "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.Patch), global::Framework.Protobuf.Message.Patch.Parser, new[]{ "Provider", "Publish", "Region", "ServerType", "Address", "PublicIp", "PrivateIp", "Version", "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.Restart), global::Framework.Protobuf.Message.Restart.Parser, new[]{ "Provider", "Publish", "Region", "ServerTypes", "Address", "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.Terminate), global::Framework.Protobuf.Message.Terminate.Parser, new[]{ "Provider", "Publish", "Region", "ServerTypes", "Address", "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.Config), global::Framework.Protobuf.Message.Config.Parser, new[]{ "Provider", "Publish", "Region", "ServerTypes", "Address", "ErrorCode", "Override" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.Notify), global::Framework.Protobuf.Message.Notify.Parser, new[]{ "Provider", "Publish", "Region", "Address", "ServerType", "ErrorCode", "Id", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Framework.Protobuf.Message.Caspars), global::Framework.Protobuf.Message.Caspars.Parser, new[]{ "Provider", "Publish", "Region", "ServerTypes", "Address", "ProcessInfos" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Encript : pb::IMessage<Encript> {
    private static readonly pb::MessageParser<Encript> _parser = new pb::MessageParser<Encript>(() => new Encript());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Encript> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Encript() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Encript(Encript other) : this() {
      key_ = other.key_;
      iV_ = other.iV_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Encript Clone() {
      return new Encript(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IV" field.</summary>
    public const int IVFieldNumber = 2;
    private string iV_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IV {
      get { return iV_; }
      set {
        iV_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Encript);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Encript other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (IV != other.IV) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (IV.Length != 0) hash ^= IV.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (IV.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IV);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (IV.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IV);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Encript other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.IV.Length != 0) {
        IV = other.IV;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            IV = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Seed : pb::IMessage<Seed> {
    private static readonly pb::MessageParser<Seed> _parser = new pb::MessageParser<Seed>(() => new Seed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Seed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Seed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Seed(Seed other) : this() {
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Seed Clone() {
      return new Seed(this);
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Seed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Seed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Offset != other.Offset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Offset != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Seed other) {
      if (other == null) {
        return;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Offset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Connect : pb::IMessage<Connect> {
    private static readonly pb::MessageParser<Connect> _parser = new pb::MessageParser<Connect>(() => new Connect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Connect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connect(Connect other) : this() {
      serverType_ = other.serverType_;
      uID_ = other.uID_;
      provider_ = other.provider_;
      publish_ = other.publish_;
      region_ = other.region_;
      address_ = other.address_;
      publicIp_ = other.publicIp_;
      privateIp_ = other.privateIp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connect Clone() {
      return new Connect(this);
    }

    /// <summary>Field number for the "ServerType" field.</summary>
    public const int ServerTypeFieldNumber = 1;
    private string serverType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerType {
      get { return serverType_; }
      set {
        serverType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 2;
    private long uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    /// <summary>Field number for the "Provider" field.</summary>
    public const int ProviderFieldNumber = 3;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Publish" field.</summary>
    public const int PublishFieldNumber = 4;
    private string publish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publish {
      get { return publish_; }
      set {
        publish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 5;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 6;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "PublicIp" field.</summary>
    public const int PublicIpFieldNumber = 7;
    private string publicIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicIp {
      get { return publicIp_; }
      set {
        publicIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PrivateIp" field.</summary>
    public const int PrivateIpFieldNumber = 8;
    private string privateIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateIp {
      get { return privateIp_; }
      set {
        privateIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Connect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Connect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerType != other.ServerType) return false;
      if (UID != other.UID) return false;
      if (Provider != other.Provider) return false;
      if (Publish != other.Publish) return false;
      if (Region != other.Region) return false;
      if (Address != other.Address) return false;
      if (PublicIp != other.PublicIp) return false;
      if (PrivateIp != other.PrivateIp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerType.Length != 0) hash ^= ServerType.GetHashCode();
      if (UID != 0L) hash ^= UID.GetHashCode();
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (Publish.Length != 0) hash ^= Publish.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Address != 0L) hash ^= Address.GetHashCode();
      if (PublicIp.Length != 0) hash ^= PublicIp.GetHashCode();
      if (PrivateIp.Length != 0) hash ^= PrivateIp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerType);
      }
      if (UID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UID);
      }
      if (Provider.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Provider);
      }
      if (Publish.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Publish);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Region);
      }
      if (Address != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Address);
      }
      if (PublicIp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PublicIp);
      }
      if (PrivateIp.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PrivateIp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerType);
      }
      if (UID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UID);
      }
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (Publish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publish);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Address != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Address);
      }
      if (PublicIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicIp);
      }
      if (PrivateIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateIp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Connect other) {
      if (other == null) {
        return;
      }
      if (other.ServerType.Length != 0) {
        ServerType = other.ServerType;
      }
      if (other.UID != 0L) {
        UID = other.UID;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.Publish.Length != 0) {
        Publish = other.Publish;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Address != 0L) {
        Address = other.Address;
      }
      if (other.PublicIp.Length != 0) {
        PublicIp = other.PublicIp;
      }
      if (other.PrivateIp.Length != 0) {
        PrivateIp = other.PrivateIp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerType = input.ReadString();
            break;
          }
          case 16: {
            UID = input.ReadInt64();
            break;
          }
          case 26: {
            Provider = input.ReadString();
            break;
          }
          case 34: {
            Publish = input.ReadString();
            break;
          }
          case 42: {
            Region = input.ReadString();
            break;
          }
          case 48: {
            Address = input.ReadInt64();
            break;
          }
          case 58: {
            PublicIp = input.ReadString();
            break;
          }
          case 66: {
            PrivateIp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProcessInfo : pb::IMessage<ProcessInfo> {
    private static readonly pb::MessageParser<ProcessInfo> _parser = new pb::MessageParser<ProcessInfo>(() => new ProcessInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcessInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessInfo(ProcessInfo other) : this() {
      serverType_ = other.serverType_;
      uID_ = other.uID_;
      provider_ = other.provider_;
      publish_ = other.publish_;
      region_ = other.region_;
      version_ = other.version_;
      state_ = other.state_;
      lastError_ = other.lastError_;
      publicIp_ = other.publicIp_;
      privateIp_ = other.privateIp_;
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessInfo Clone() {
      return new ProcessInfo(this);
    }

    /// <summary>Field number for the "ServerType" field.</summary>
    public const int ServerTypeFieldNumber = 1;
    private string serverType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerType {
      get { return serverType_; }
      set {
        serverType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 2;
    private long uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    /// <summary>Field number for the "Provider" field.</summary>
    public const int ProviderFieldNumber = 3;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Publish" field.</summary>
    public const int PublishFieldNumber = 4;
    private string publish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publish {
      get { return publish_; }
      set {
        publish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 5;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 6;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 7;
    private string state_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastError" field.</summary>
    public const int LastErrorFieldNumber = 8;
    private string lastError_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastError {
      get { return lastError_; }
      set {
        lastError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PublicIp" field.</summary>
    public const int PublicIpFieldNumber = 9;
    private string publicIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicIp {
      get { return publicIp_; }
      set {
        publicIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PrivateIp" field.</summary>
    public const int PrivateIpFieldNumber = 10;
    private string privateIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateIp {
      get { return privateIp_; }
      set {
        privateIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 11;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcessInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcessInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerType != other.ServerType) return false;
      if (UID != other.UID) return false;
      if (Provider != other.Provider) return false;
      if (Publish != other.Publish) return false;
      if (Region != other.Region) return false;
      if (Version != other.Version) return false;
      if (State != other.State) return false;
      if (LastError != other.LastError) return false;
      if (PublicIp != other.PublicIp) return false;
      if (PrivateIp != other.PrivateIp) return false;
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerType.Length != 0) hash ^= ServerType.GetHashCode();
      if (UID != 0L) hash ^= UID.GetHashCode();
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (Publish.Length != 0) hash ^= Publish.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (LastError.Length != 0) hash ^= LastError.GetHashCode();
      if (PublicIp.Length != 0) hash ^= PublicIp.GetHashCode();
      if (PrivateIp.Length != 0) hash ^= PrivateIp.GetHashCode();
      if (Address != 0L) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerType);
      }
      if (UID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UID);
      }
      if (Provider.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Provider);
      }
      if (Publish.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Publish);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Region);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Version);
      }
      if (State.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(State);
      }
      if (LastError.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LastError);
      }
      if (PublicIp.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PublicIp);
      }
      if (PrivateIp.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PrivateIp);
      }
      if (Address != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerType);
      }
      if (UID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UID);
      }
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (Publish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publish);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (LastError.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastError);
      }
      if (PublicIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicIp);
      }
      if (PrivateIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateIp);
      }
      if (Address != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcessInfo other) {
      if (other == null) {
        return;
      }
      if (other.ServerType.Length != 0) {
        ServerType = other.ServerType;
      }
      if (other.UID != 0L) {
        UID = other.UID;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.Publish.Length != 0) {
        Publish = other.Publish;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.LastError.Length != 0) {
        LastError = other.LastError;
      }
      if (other.PublicIp.Length != 0) {
        PublicIp = other.PublicIp;
      }
      if (other.PrivateIp.Length != 0) {
        PrivateIp = other.PrivateIp;
      }
      if (other.Address != 0L) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerType = input.ReadString();
            break;
          }
          case 16: {
            UID = input.ReadInt64();
            break;
          }
          case 26: {
            Provider = input.ReadString();
            break;
          }
          case 34: {
            Publish = input.ReadString();
            break;
          }
          case 42: {
            Region = input.ReadString();
            break;
          }
          case 50: {
            Version = input.ReadString();
            break;
          }
          case 58: {
            State = input.ReadString();
            break;
          }
          case 66: {
            LastError = input.ReadString();
            break;
          }
          case 74: {
            PublicIp = input.ReadString();
            break;
          }
          case 82: {
            PrivateIp = input.ReadString();
            break;
          }
          case 88: {
            Address = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Patch : pb::IMessage<Patch> {
    private static readonly pb::MessageParser<Patch> _parser = new pb::MessageParser<Patch>(() => new Patch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Patch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Patch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Patch(Patch other) : this() {
      provider_ = other.provider_;
      publish_ = other.publish_;
      region_ = other.region_;
      serverType_ = other.serverType_;
      address_ = other.address_;
      publicIp_ = other.publicIp_;
      privateIp_ = other.privateIp_;
      version_ = other.version_;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Patch Clone() {
      return new Patch(this);
    }

    /// <summary>Field number for the "Provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Publish" field.</summary>
    public const int PublishFieldNumber = 2;
    private string publish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publish {
      get { return publish_; }
      set {
        publish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerType" field.</summary>
    public const int ServerTypeFieldNumber = 4;
    private string serverType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerType {
      get { return serverType_; }
      set {
        serverType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 5;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "PublicIp" field.</summary>
    public const int PublicIpFieldNumber = 6;
    private string publicIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicIp {
      get { return publicIp_; }
      set {
        publicIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PrivateIp" field.</summary>
    public const int PrivateIpFieldNumber = 7;
    private string privateIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateIp {
      get { return privateIp_; }
      set {
        privateIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 8;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 9;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Patch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Patch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (Publish != other.Publish) return false;
      if (Region != other.Region) return false;
      if (ServerType != other.ServerType) return false;
      if (Address != other.Address) return false;
      if (PublicIp != other.PublicIp) return false;
      if (PrivateIp != other.PrivateIp) return false;
      if (Version != other.Version) return false;
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (Publish.Length != 0) hash ^= Publish.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (ServerType.Length != 0) hash ^= ServerType.GetHashCode();
      if (Address != 0L) hash ^= Address.GetHashCode();
      if (PublicIp.Length != 0) hash ^= PublicIp.GetHashCode();
      if (PrivateIp.Length != 0) hash ^= PrivateIp.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (Publish.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Publish);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
      if (ServerType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServerType);
      }
      if (Address != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Address);
      }
      if (PublicIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PublicIp);
      }
      if (PrivateIp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PrivateIp);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Version);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (Publish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publish);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (ServerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerType);
      }
      if (Address != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Address);
      }
      if (PublicIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicIp);
      }
      if (PrivateIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateIp);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Patch other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.Publish.Length != 0) {
        Publish = other.Publish;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.ServerType.Length != 0) {
        ServerType = other.ServerType;
      }
      if (other.Address != 0L) {
        Address = other.Address;
      }
      if (other.PublicIp.Length != 0) {
        PublicIp = other.PublicIp;
      }
      if (other.PrivateIp.Length != 0) {
        PrivateIp = other.PrivateIp;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            Publish = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
          case 34: {
            ServerType = input.ReadString();
            break;
          }
          case 40: {
            Address = input.ReadInt64();
            break;
          }
          case 50: {
            PublicIp = input.ReadString();
            break;
          }
          case 58: {
            PrivateIp = input.ReadString();
            break;
          }
          case 66: {
            Version = input.ReadString();
            break;
          }
          case 74: {
            ErrorCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Restart : pb::IMessage<Restart> {
    private static readonly pb::MessageParser<Restart> _parser = new pb::MessageParser<Restart>(() => new Restart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Restart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Restart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Restart(Restart other) : this() {
      provider_ = other.provider_;
      publish_ = other.publish_;
      region_ = other.region_;
      serverTypes_ = other.serverTypes_.Clone();
      address_ = other.address_;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Restart Clone() {
      return new Restart(this);
    }

    /// <summary>Field number for the "Provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Publish" field.</summary>
    public const int PublishFieldNumber = 2;
    private string publish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publish {
      get { return publish_; }
      set {
        publish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerTypes" field.</summary>
    public const int ServerTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_serverTypes_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> serverTypes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServerTypes {
      get { return serverTypes_; }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 5;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 6;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Restart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Restart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (Publish != other.Publish) return false;
      if (Region != other.Region) return false;
      if(!serverTypes_.Equals(other.serverTypes_)) return false;
      if (Address != other.Address) return false;
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (Publish.Length != 0) hash ^= Publish.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      hash ^= serverTypes_.GetHashCode();
      if (Address != 0L) hash ^= Address.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (Publish.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Publish);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
      serverTypes_.WriteTo(output, _repeated_serverTypes_codec);
      if (Address != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Address);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (Publish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publish);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      size += serverTypes_.CalculateSize(_repeated_serverTypes_codec);
      if (Address != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Address);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Restart other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.Publish.Length != 0) {
        Publish = other.Publish;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      serverTypes_.Add(other.serverTypes_);
      if (other.Address != 0L) {
        Address = other.Address;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            Publish = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
          case 34: {
            serverTypes_.AddEntriesFrom(input, _repeated_serverTypes_codec);
            break;
          }
          case 40: {
            Address = input.ReadInt64();
            break;
          }
          case 50: {
            ErrorCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Terminate : pb::IMessage<Terminate> {
    private static readonly pb::MessageParser<Terminate> _parser = new pb::MessageParser<Terminate>(() => new Terminate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Terminate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Terminate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Terminate(Terminate other) : this() {
      provider_ = other.provider_;
      publish_ = other.publish_;
      region_ = other.region_;
      serverTypes_ = other.serverTypes_.Clone();
      address_ = other.address_;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Terminate Clone() {
      return new Terminate(this);
    }

    /// <summary>Field number for the "Provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Publish" field.</summary>
    public const int PublishFieldNumber = 2;
    private string publish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publish {
      get { return publish_; }
      set {
        publish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerTypes" field.</summary>
    public const int ServerTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_serverTypes_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> serverTypes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServerTypes {
      get { return serverTypes_; }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 5;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 6;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Terminate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Terminate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (Publish != other.Publish) return false;
      if (Region != other.Region) return false;
      if(!serverTypes_.Equals(other.serverTypes_)) return false;
      if (Address != other.Address) return false;
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (Publish.Length != 0) hash ^= Publish.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      hash ^= serverTypes_.GetHashCode();
      if (Address != 0L) hash ^= Address.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (Publish.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Publish);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
      serverTypes_.WriteTo(output, _repeated_serverTypes_codec);
      if (Address != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Address);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (Publish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publish);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      size += serverTypes_.CalculateSize(_repeated_serverTypes_codec);
      if (Address != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Address);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Terminate other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.Publish.Length != 0) {
        Publish = other.Publish;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      serverTypes_.Add(other.serverTypes_);
      if (other.Address != 0L) {
        Address = other.Address;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            Publish = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
          case 34: {
            serverTypes_.AddEntriesFrom(input, _repeated_serverTypes_codec);
            break;
          }
          case 40: {
            Address = input.ReadInt64();
            break;
          }
          case 50: {
            ErrorCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      provider_ = other.provider_;
      publish_ = other.publish_;
      region_ = other.region_;
      serverTypes_ = other.serverTypes_.Clone();
      address_ = other.address_;
      errorCode_ = other.errorCode_;
      override_ = other.override_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "Provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Publish" field.</summary>
    public const int PublishFieldNumber = 2;
    private string publish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publish {
      get { return publish_; }
      set {
        publish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerTypes" field.</summary>
    public const int ServerTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_serverTypes_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> serverTypes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServerTypes {
      get { return serverTypes_; }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 5;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 6;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Override" field.</summary>
    public const int OverrideFieldNumber = 7;
    private string override_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Override {
      get { return override_; }
      set {
        override_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (Publish != other.Publish) return false;
      if (Region != other.Region) return false;
      if(!serverTypes_.Equals(other.serverTypes_)) return false;
      if (Address != other.Address) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (Override != other.Override) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (Publish.Length != 0) hash ^= Publish.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      hash ^= serverTypes_.GetHashCode();
      if (Address != 0L) hash ^= Address.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (Override.Length != 0) hash ^= Override.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (Publish.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Publish);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
      serverTypes_.WriteTo(output, _repeated_serverTypes_codec);
      if (Address != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Address);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ErrorCode);
      }
      if (Override.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Override);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (Publish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publish);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      size += serverTypes_.CalculateSize(_repeated_serverTypes_codec);
      if (Address != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Address);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (Override.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Override);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.Publish.Length != 0) {
        Publish = other.Publish;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      serverTypes_.Add(other.serverTypes_);
      if (other.Address != 0L) {
        Address = other.Address;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Override.Length != 0) {
        Override = other.Override;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            Publish = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
          case 34: {
            serverTypes_.AddEntriesFrom(input, _repeated_serverTypes_codec);
            break;
          }
          case 40: {
            Address = input.ReadInt64();
            break;
          }
          case 50: {
            ErrorCode = input.ReadString();
            break;
          }
          case 58: {
            Override = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify : pb::IMessage<Notify> {
    private static readonly pb::MessageParser<Notify> _parser = new pb::MessageParser<Notify>(() => new Notify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify(Notify other) : this() {
      provider_ = other.provider_;
      publish_ = other.publish_;
      region_ = other.region_;
      address_ = other.address_;
      serverType_ = other.serverType_;
      errorCode_ = other.errorCode_;
      id_ = other.id_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify Clone() {
      return new Notify(this);
    }

    /// <summary>Field number for the "Provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Publish" field.</summary>
    public const int PublishFieldNumber = 2;
    private string publish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publish {
      get { return publish_; }
      set {
        publish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 4;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "ServerType" field.</summary>
    public const int ServerTypeFieldNumber = 5;
    private string serverType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerType {
      get { return serverType_; }
      set {
        serverType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 6;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 7;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 8;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (Publish != other.Publish) return false;
      if (Region != other.Region) return false;
      if (Address != other.Address) return false;
      if (ServerType != other.ServerType) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (Id != other.Id) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (Publish.Length != 0) hash ^= Publish.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Address != 0L) hash ^= Address.GetHashCode();
      if (ServerType.Length != 0) hash ^= ServerType.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (Publish.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Publish);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
      if (Address != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Address);
      }
      if (ServerType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ServerType);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ErrorCode);
      }
      if (Id != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Id);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (Publish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publish);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Address != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Address);
      }
      if (ServerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerType);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.Publish.Length != 0) {
        Publish = other.Publish;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Address != 0L) {
        Address = other.Address;
      }
      if (other.ServerType.Length != 0) {
        ServerType = other.ServerType;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            Publish = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
          case 32: {
            Address = input.ReadInt64();
            break;
          }
          case 42: {
            ServerType = input.ReadString();
            break;
          }
          case 50: {
            ErrorCode = input.ReadString();
            break;
          }
          case 56: {
            Id = input.ReadInt32();
            break;
          }
          case 66: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Caspars : pb::IMessage<Caspars> {
    private static readonly pb::MessageParser<Caspars> _parser = new pb::MessageParser<Caspars>(() => new Caspars());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Caspars> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Framework.Protobuf.Message.AgentReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Caspars() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Caspars(Caspars other) : this() {
      provider_ = other.provider_;
      publish_ = other.publish_;
      region_ = other.region_;
      serverTypes_ = other.serverTypes_.Clone();
      address_ = other.address_;
      processInfos_ = other.processInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Caspars Clone() {
      return new Caspars(this);
    }

    /// <summary>Field number for the "Provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Publish" field.</summary>
    public const int PublishFieldNumber = 2;
    private string publish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Publish {
      get { return publish_; }
      set {
        publish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerTypes" field.</summary>
    public const int ServerTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_serverTypes_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> serverTypes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServerTypes {
      get { return serverTypes_; }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 5;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "ProcessInfos" field.</summary>
    public const int ProcessInfosFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Framework.Protobuf.Message.ProcessInfo> _repeated_processInfos_codec
        = pb::FieldCodec.ForMessage(50, global::Framework.Protobuf.Message.ProcessInfo.Parser);
    private readonly pbc::RepeatedField<global::Framework.Protobuf.Message.ProcessInfo> processInfos_ = new pbc::RepeatedField<global::Framework.Protobuf.Message.ProcessInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Framework.Protobuf.Message.ProcessInfo> ProcessInfos {
      get { return processInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Caspars);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Caspars other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (Publish != other.Publish) return false;
      if (Region != other.Region) return false;
      if(!serverTypes_.Equals(other.serverTypes_)) return false;
      if (Address != other.Address) return false;
      if(!processInfos_.Equals(other.processInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (Publish.Length != 0) hash ^= Publish.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      hash ^= serverTypes_.GetHashCode();
      if (Address != 0L) hash ^= Address.GetHashCode();
      hash ^= processInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Provider);
      }
      if (Publish.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Publish);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
      serverTypes_.WriteTo(output, _repeated_serverTypes_codec);
      if (Address != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Address);
      }
      processInfos_.WriteTo(output, _repeated_processInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (Publish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Publish);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      size += serverTypes_.CalculateSize(_repeated_serverTypes_codec);
      if (Address != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Address);
      }
      size += processInfos_.CalculateSize(_repeated_processInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Caspars other) {
      if (other == null) {
        return;
      }
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.Publish.Length != 0) {
        Publish = other.Publish;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      serverTypes_.Add(other.serverTypes_);
      if (other.Address != 0L) {
        Address = other.Address;
      }
      processInfos_.Add(other.processInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Provider = input.ReadString();
            break;
          }
          case 18: {
            Publish = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
          case 34: {
            serverTypes_.AddEntriesFrom(input, _repeated_serverTypes_codec);
            break;
          }
          case 40: {
            Address = input.ReadInt64();
            break;
          }
          case 50: {
            processInfos_.AddEntriesFrom(input, _repeated_processInfos_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
